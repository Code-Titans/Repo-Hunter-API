require("dotenv-safe").config({
  allowEmptyValues: true
});
const { Pool } = require('pg');

const pool = new Pool({ connectionString: process.env.CONNECTIONSTRING });

pool.on('connect', () => {
  console.log('connected to the database')
});

// TODO optimise this function

function createTables() {
  const queries = [
    {
      name: 'Users',
      text: `CREATE TABLE "user_details"
            (
              "user_id" serial NOT NULL,
              "username" varchar(50) UNIQUE,
              "password" varchar(255) NOT NULL,
              "first_name" varchar(15),
              "last_name" varchar(15),
              "email" varchar(50) NOT NULL UNIQUE,
              "bio" varchar(255),
              "company" varchar(20),
              "website" varchar(100),
              "location" varchar(50),
              "profile_pic" varchar(255),
              CONSTRAINT user_details_pk PRIMARY KEY ("user_id")
            )`,
    },
    {
      name: 'User_Followers',
      text: `CREATE TABLE "user_followers"
            (
              "id" serial NOT NULL,
              "user_id" integer NOT NULL,
              "follower_id" integer NOT NULL,
              CONSTRAINT user_details_Followers_pk PRIMARY KEY ("id")
            )`
    },
    {
      name: 'Repositories',
      text: `CREATE TABLE "repositories"
            (
              "repo_id" serial NOT NULL,
              "name" varchar(255) NOT NULL UNIQUE,
              "repo_link" varchar(255) NOT NULL UNIQUE,
              "user_id" integer NOT NULL,
              CONSTRAINT repositories_pk PRIMARY KEY ("repo_id")
            )`
    },
    {
      name: 'Likes',
      text: `CREATE TABLE "likes"
            (
              "id" serial NOT NULL,
              "user_id" integer NOT NULL,
              "repo_id" integer NOT NULL,
              CONSTRAINT likes_pk PRIMARY KEY ("id")
            )`
    },
    {
      name: 'Comments',
      text: `CREATE TABLE "comments"
            (
              "comment_id" serial NOT NULL,
              "comment" varchar(255) NOT NULL,
              "user_id" integer NOT NULL,
              "repo_id" integer NOT NULL,
              CONSTRAINT comments_pk PRIMARY KEY ("comment_id")
            )`
    },
    {
      text: `ALTER TABLE "user_followers" ADD CONSTRAINT "user_followers_fk0" FOREIGN KEY ("user_id") REFERENCES "user_details"("user_id")`
    },
    {
      text: `ALTER TABLE "user_followers" ADD CONSTRAINT "user_followers_fk1" FOREIGN KEY ("follower_id") REFERENCES "user_details"("user_id")`
    },
    {
      text: `ALTER TABLE "repositories" ADD CONSTRAINT "repositories_fk0" FOREIGN KEY ("user_id") REFERENCES "user_details"("user_id")`
    },
    {
      text: `ALTER TABLE "likes" ADD CONSTRAINT "likes_fk0" FOREIGN KEY ("user_id") REFERENCES "user_details"("user_id")`
    },
    {
      text: `ALTER TABLE "likes" ADD CONSTRAINT "likes_fk1" FOREIGN KEY ("repo_id") REFERENCES "repositories"("repo_id")`
    },
    {
      text: `ALTER TABLE "comments" ADD CONSTRAINT "comments_fk0" FOREIGN KEY ("user_id") REFERENCES "user_details"("user_id")`
    },
    {
      text: `ALTER TABLE "comments" ADD CONSTRAINT "comments_fk1" FOREIGN KEY ("repo_id") REFERENCES "repositories"("repo_id")`
    }
  ];

  for (var i = 0; i < queries.length; i++) {
    pool.query(queries[i], function (err, res) {
      if (err) {
        console.log(err.message);
      } else {
        console.log(res);
      }
    })
  }
}

createTables();
